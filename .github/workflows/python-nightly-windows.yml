name: Windows Testing # Name remains as per user's request, but runs on Linux now

on:
  push:
    branches:
      - main
  workflow_dispatch: # Allows manual trigger

jobs:
  build:
    runs-on: ubuntu-latest # Changed from macos-latest to ubuntu-latest for Xvfb and apt-get compatibility
    env:
      PY_COLORS: "1"
    strategy:
      fail-fast: false
      max-parallel: 6
      matrix:
        python-version: ["3.12"]

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install system dependencies for Chrome and Xvfb
      # Google Chrome is needed for SeleniumBase
      # xvfb is needed for virtual display if not running in strict headless mode
      run: |
        sudo apt-get update
        sudo apt-get install -y google-chrome-stable xvfb ffmpeg

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install --upgrade wheel
        # Ensure 'requests' is installed for the proxy script
        pip install -r requirements.txt requests

    - name: Install SeleniumBase
      run: |
        pip install . # Assuming . refers to the root of your SeleniumBase project

    - name: Check the console scripts interface
      run: |
        seleniumbase
        sbase

    - name: Install chromedriver (SeleniumBase handles this usually)
      # This step might be redundant if SeleniumBase auto-manages drivers,
      # but keeping it as it was in your original file.
      run: |
        seleniumbase install chromedriver

    - name: Get chrome-headless-shell
      run: |
        sbase get chs

    - name: Make sure pytest is working
      run: |
        echo "def test_1(): pass" > nothing.py
        pytest nothing.py

    # --- Proxy Integration Starts Here ---
    - name: Get and Set Proxy Environment Variable
      # This step runs your Python script to fetch a proxy
      # and sets the SELENIUM_PROXY environment variable for subsequent steps.
      run: python examples/get_proxy.py # Adjust path if your script is in a subfolder
    # --- Proxy Integration Ends Here ---

    # Original Xvfb setup (now redundant if using xvfb=True in SeleniumBase directly)
    # Keeping it as is from your original, but generally, SeleniumBase's xvfb=True
    # handles this internally without needing a separate Xvfb_launcher.sh for Python scripts.
    - run: |
        # xvfb installed above with apt-get
        python -m pip install pyautogui # If your script uses pyautogui
        # chmod +x integrations/linux/Xvfb_launcher.sh # This script is Linux-specific
        # integrations/linux/Xvfb_launcher.sh # This script would launch Xvfb manually

    - name: Custom Script to Test cloudflare with Proxy
      # Now, the SELENIUM_PROXY environment variable is available.
      # We pass its value to the SeleniumBase script using the --proxy argument.
      run: |
        # 1. Create directory for video recordings
        mkdir -p video_recordings
        VIDEO_OUTPUT_PATH="video_recordings/session.mp4"
        
        # 2. Start Xvfb in the background
        # Xvfb runs on display :99 with a resolution of 1920x1080 and 24-bit color depth.
        Xvfb :99 -screen 0 1920x1080x24 -ac +extension GLX +render -noreset &
        echo "Xvfb started on display :99"
        
        # Give Xvfb a moment to fully initialize
        sleep 2
        
        # 3. Start FFmpeg recording in the background
        # -y: Overwrite output files without asking
        # -f x11grab: specifies the X11 grabbing device
        # -framerate 15: Reduced framerate to save space/resources for CI/CD
        # -video_size 1920x1080: IMPORTANT - matches Xvfb screen size
        # -i :99.0: specifies the input display (:99, screen 0)
        # -c:v libx264: uses H.264 video codec
        # -preset medium -crf 28: Encoding options for balanced quality/size (higher CRF for smaller size)
        # -pix_fmt yuv420p: ensures compatibility with most video players
        ffmpeg -y -f x11grab -framerate 15 -video_size 1920x1080 -i :99.0 -c:v libx264 -preset medium -crf 28 -pix_fmt yuv420p "$VIDEO_OUTPUT_PATH" &
        
        # Store the FFmpeg process ID
        FFMPEG_PID=$!
        echo "FFmpeg recording started with PID: $FFMPEG_PID"
        
        # 4. Run your browser automation script
        echo "Running scraper.py..."
        python examples/raw_recaptcha.py --browser=chrome --proxy="${{ env.SELENIUM_PROXY }}"
        echo "Stopping FFmpeg recording..."
        kill -s SIGINT $FFMPEG_PID || true # Send SIGINT to FFmpeg to stop
        wait $FFMPEG_PID || true # Wait for FFmpeg process to fully terminate
        
        echo "Video recording completed: $VIDEO_OUTPUT_PATH"
      env:
        # Explicitly pass SELENIUM_PROXY as an environment variable to the step
        # This makes it available directly within the command's environment.
        SELENIUM_PROXY: ${{ env.SELENIUM_PROXY }}

    - name: Upload Video Recording
      if: always() # Upload even if previous steps fail
      uses: actions/upload-artifact@v4
      with:
        name: xvfb-session-video
        path: video_recordings/session.mp4 # Path where your video is saved
      
    - name: Upload Logs (Optional, for debugging)
      if: always() # Uploads even if previous steps fail
      uses: actions/upload-artifact@v4
      with:
        name: selenium-logs
        path: latest_logs/ # This is where SeleniumBase saves its logs and screenshots
